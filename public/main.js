// main.js

import { buildGrid, initFleetDraggables, enableGridDrop, populateFleetPanel, createGameContent } from './setup.js';
import { disableDoubleTapZoom } from './mobileEvents.js';

disableDoubleTapZoom();

const connectBtn = document.getElementById('connectBtn');
const cancelBtn = document.getElementById('cancelBtn');
const modal = document.getElementById('modal');
const modalText = modal.querySelector('p');
const secretInput = document.getElementById('secretInput');
const connectionPanel = document.getElementById('connectionPanel');
const gameContainer = document.getElementById('gameContainer');

let socket = null;
let secret_id = null;
let role = null;
let selfDisconnect = false;

let myField = null;
let enemyField = null;
let currentTurn = null;

// –ì–µ–Ω–µ—Ä–∏–º –∏–ª–∏ —á–∏—Ç–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π playerId
let playerId = localStorage.getItem('playerId');
if (!playerId) {
  playerId = 'pid-' + Date.now() + '-' + Math.floor(Math.random() * 1e6);
  localStorage.setItem('playerId', playerId);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function openSocket(isReconnect = false) {
  socket = new WebSocket('ws://192.168.0.208:3012');
  console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ WebSocket‚Ä¶');

  socket.onopen = () => {
    // –í–∫–ª—é—á–∞–µ–º playerId –≤ –∫–∞–∂–¥—ã–π connect/reconnect
    const base = { secret_id, playerId };
    const msg = isReconnect
      ? { ...base, type: 'reconnect', role }
      : { ...base, type: 'connect' };
    console.log('‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞', msg);
    socket.send(JSON.stringify(msg));
  };

  socket.onmessage = (evt) => {
    const data = JSON.parse(evt.data);
    console.log('‚Üê –ü–æ–ª—É—á–µ–Ω–æ', data);
    handleServerMessage(data);
  };

  socket.onclose = (evt) => {
    console.warn('WebSocket –∑–∞–∫—Ä—ã–ª—Å—è', evt.code, evt.reason);
    if (!selfDisconnect) {
      showReloadModal(); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –Ω–µ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    selfDisconnect = false; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
  };
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –ø—Ä–æ—Å—å–±–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
function showReloadModal() {
  modalText.textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
  // –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–Ω–æ–ø–∫—É –≤ ‚Äú–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å‚Äù
  cancelBtn.textContent = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å';
  cancelBtn.classList.remove('hidden');
  // –ü–æ –∫–ª–∏–∫—É –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
  cancelBtn.onclick = () => window.location.reload();

  // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π UI
  modal.classList.remove('hidden');
  connectionPanel.classList.add('hidden');
  gameContainer.classList.add('hidden');

  document.body.classList.remove('setup-mode');
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞
function handleServerMessage(data) {
  console.log('data.type = \n', data.type);

  switch (data.type) {
    case 'role_assigned':
      role = data.role;
      sessionStorage.setItem('secret_id', secret_id);
      sessionStorage.setItem('role', role);
      console.log(`–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å ${role}`);
      break;

    case 'waiting':
      showModal('–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞‚Ä¶');
      break;

    case 'connected':
      hideModal();
      showGame();
      console.log('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã ‚Äî —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã');
      break;

    case 'pause':
      showModal('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞');
      break;

    case 'resume':
      hideModal();
      showGame();
      console.log('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      break;

    case 'id_taken':
      alert('–°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏');
      teardown();
      break;

    case 'battle':
      console.log('case battle ‚Üí', data);
      if (!data.battle_ready) {
        showModal('–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞‚Ä¶');
        return;
      }
      hideModal();
      import('./battle.js').then(mod => {
        mod.startBattle(role, data.fleet, teardown, socket, secret_id, playerId, data.shots || []);

        // –ø–æ–ª—É—á–∞–µ–º DOM-–ø–æ–ª—è
        myField = document.getElementById('myField');
        enemyField = document.getElementById('enemyField');
        currentTurn = data.turn;

        // —Å—Ç–∞–≤–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π –ø–æ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        if (currentTurn === role) {
          // –≤–∞—à —Ö–æ–¥ ‚Äî –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å –ø–æ –≤—Ä–∞–≥—É
          enemyField.style.pointerEvents = 'auto';
          document.getElementById('game-title').textContent = '–í–∞—à —Ö–æ–¥ üéÆ'
        } else {
          // –∂–¥—ë—à—å —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
          enemyField.style.pointerEvents = 'none';
          document.getElementById('game-title').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ‚è≥'
        }
      });
      break;

    case 'shot_result': {
      const { x, y, isHit, by, turn, sunk, gameOver, winner } = data;

      // –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ/–ø—Ä–æ–º–∞—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–µ
      const targetField = (by === role) ? enemyField : myField;
      const targetCell = targetField
        .querySelector(`.cell[data-x="${x}"][data-y="${y}"]`);
      if (targetCell) {
        targetCell.classList.add(isHit ? 'hit' : 'miss');
      }

      // –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —É—Ç–æ–Ω—É–ª, –æ–±–≤–µ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –í–°–ï –µ–≥–æ –∫–ª–µ—Ç–∫–∏ ‚Äî –∏ —É —Å—Ç—Ä–µ–ª—è–≤—à–µ–≥–æ, –∏ —É –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
      if (sunk) {
        const deltas = [
          [-1, -1], [-1, 0], [-1, 1],
          [0, -1], [0, 1],
          [1, -1], [1, 0], [1, 1]
        ];

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∏—Å—É–µ–º ¬´–ø—Ä–æ–º–∞—Ö–∏ –≤–æ–∫—Ä—É–≥¬ª
        const ringField = (by === role) ? enemyField : myField;

        sunk.coords.forEach(({ x: sx, y: sy }) => {
          deltas.forEach(([dx, dy]) => {
            const nx = sx + dx, ny = sy + dy;
            console.log(`–ø–æ–ª—è –¥–ª—è miss \n x=${nx} y=${ny}`);
            
            const cell = ringField.querySelector(`.cell[data-x="${nx}"][data-y="${ny}"]`);
            if (cell && !cell.classList.contains('hit')) {
              cell.classList.add('miss');
            }
          });
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –ø–æ–ª—é turn
      currentTurn = turn;
      if (!gameOver) {
        const myTurn = (currentTurn === role);
        enemyField.style.pointerEvents = myTurn ? 'auto' : 'none';
        document.getElementById('game-title').textContent = myTurn ? '–í–∞—à —Ö–æ–¥ üéÆ' : '–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ‚è≥';
      }

      // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
      if (gameOver) {
        if (winner === role) {
          alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâüéâ, –í—ã –ø–æ–±–µ–¥–∏–ª–∏ üèÜ');
        } else {
          alert('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ‚ò†Ô∏è');
        }
        teardown();
      }
      break;
    }

    case 'error':
      alert(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      teardown();
      break;

    default:
      console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è', data);
  }
}

// UI-—Ñ—É–Ω–∫—Ü–∏–∏
function showModal(text) {
  modalText.textContent = text;
  cancelBtn.classList.remove('hidden');
  modal.classList.remove('hidden');
  connectionPanel.classList.add('hidden');
  gameContainer.classList.add('hidden');

  document.body.classList.remove('setup-mode');
}

function hideModal() {
  modal.classList.add('hidden');
  cancelBtn.classList.add('hidden');
}

function showGame() {
  const container = document.getElementById('gameContainer');
  if (container) container.innerHTML = '';
  createGameContent(socket, role, secret_id, playerId, showModal, teardown);

  document.body.classList.add('setup-mode');
  hideModal();
  connectionPanel.classList.add('hidden');
  gameContainer.classList.remove('hidden');

  const grid = document.getElementById('playerGrid');
  const fleet = document.getElementById('fleetPanel');
  populateFleetPanel();
  buildGrid(grid, 13);
  initFleetDraggables(fleet);
  enableGridDrop(grid);

  const exitBtn = document.getElementById('exitBtn');
  if (exitBtn && exitBtn.classList.contains('hidden')) {
    exitBtn.classList.remove('hidden');
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function teardown() {
  selfDisconnect = true; // –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–∫ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ
  sessionStorage.clear();
  secretInput.value = '';
  role = null;
  secret_id = null;
  if (socket) socket.close();
  socket = null;
  hideModal();
  connectionPanel.classList.remove('hidden');
  gameContainer.classList.add('hidden');
  document.body.classList.remove('setup-mode');
}

// –û—Ç–º–µ–Ω–∞ –∏–∑ –º–æ–¥–∞–ª–∫–∏
cancelBtn.onclick = () => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É');
  teardown();
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
window.addEventListener('load', () => {
  const savedID = sessionStorage.getItem('secret_id');
  const savedRole = sessionStorage.getItem('role');
  if (savedID && savedRole) {
    secret_id = savedID;
    role = savedRole;
    console.log(`–ê–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç –≤ ${savedID} –∫–∞–∫ ${savedRole}`);
    openSocket(true);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
connectBtn.onclick = () => {
  secret_id = secretInput.value.trim();
  if (!secret_id || secret_id.length > 8) {
    return alert('Secret ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  openSocket(false);
};
